#!/usr/bin/env python3

import datetime
import toml, json
import requests
from pyquery import PyQuery
import pygit2
import subprocess
import re
import pathlib
import os
import os.path
from collections import OrderedDict

repo_path = '/home/garrison/Personal/wikiotics-static'
repo = pygit2.Repository(repo_path)

repo.checkout('refs/heads/master')
branch_name = '{}-migration'.format(datetime.datetime.now().strftime('%Y%m%d-%H%M%S'))
branch = repo.branches.local.create(branch_name, repo[repo.head.target])
branch_ref = 'refs/heads/' + branch_name
repo.checkout(branch_ref)

cache_dir = '/home/garrison/Personal/wikiotics-migration/.cache'
pathlib.Path(cache_dir).mkdir(parents=True, exist_ok=True)

"currently assumes utf-8 text"
def cache_http_get(url, filename):
    filename = os.path.join(cache_dir, filename)
    if not os.path.isfile(filename):
        s = requests.get(url).text
        with open(filename, 'w') as f:
            f.write(s)
    with open(filename) as f:
        return f.read()

def handle_wikitext(front_matter, js, urn):
    # DONE on main site: disable macros; get old interwiki links working from ductus rev 5fc694545542e345ea64f860d823caf719a280eb
    # https://github.com/wikiotics/ductus/blob/master/ductus/modules/textwiki/templatetags/textwiki.py
    url = 'https://wikiotics.org/urn/{}'.format(urn.replace(':', '/'))
    d = PyQuery(cache_http_get(url, '{}.html'.format(urn)))
    text = d('.ductus_textwiki_content').html()
    if text is None:
        text = ''
    if 'natural_language' in js['blob']:
        natural_language = js['blob']['natural_language']
        front_matter['languageCode'] = natural_language
    content = subprocess.Popen('pandoc -f html -t commonmark',stdin=subprocess.PIPE,stdout=subprocess.PIPE, shell=True).communicate(text.encode('utf-8'))[0].decode('utf-8')
    if content.startswith('# '):
        first_line, _, content = content.partition('\n')
        front_matter['title'] = first_line.partition('# ')[2].replace('\\!', '!')
        content = content.lstrip('\n')
    return content

def fixup(obj):
    if isinstance(obj, list):
        return [fixup(a) for a in obj]
    elif isinstance(obj, dict):
        rv = OrderedDict()
        for k in sorted(obj.keys()):
            rv[k] = fixup(obj[k])
        return rv
    else:
        return obj

def handle_picture(front_matter, js, urn):
    # https://github.com/wikiotics/ductus/blob/master/ductus/modules/picture/ductmodels.py
    for k, v in fixup(js).items():
        front_matter[k] = v

def handle_flashcard_deck(front_matter, js, urn):
    # https://github.com/wikiotics/ductus/blob/master/ductus/modules/flashcards/ductmodels.py
    for k, v in fixup(js).items():
        front_matter[k] = v

handler_dict = {
    '{http://wikiotics.org/ns/2009/wikitext}wikitext': handle_wikitext,
    '{http://wikiotics.org/ns/2009/picture}picture': handle_picture,
    '{http://wikiotics.org/ns/2011/flashcards}flashcard_deck': handle_flashcard_deck,
}

for i, rev in enumerate(toml.load("revision-history.toml")['revisions']):
    print(i, '\t', end='')
    output_filename = 'content/{}.md'.format(rev['page'])
    output_path = os.path.join(repo_path, output_filename)
    pathlib.Path(os.path.dirname(output_path)).mkdir(parents=True, exist_ok=True)
    index = repo.index
    if rev['urn']:
        url = 'https://wikiotics.org/urn/{}?view=resource_json'.format(rev['urn'].replace(':', '/'))
        print(url)
        js = json.loads(cache_http_get(url, '{}.xml'.format(rev['urn'])))
        front_matter = OrderedDict()
        front_matter['title'] = rev['page'].rpartition('/')[2].replace('_', ' ')
        content = handler_dict[js['fqn']](front_matter, js, rev['urn'])
        #print(js)
        with open(output_path, 'w') as f:
            f.write("+++\n{}+++\n".format(toml.dumps(front_matter)))
            if content:
                f.write('\n')
                f.write(content)
        # https://www.pygit2.org/recipes/git-add-reset.html
        index.add(output_filename)
    else:
        if not os.path.isfile(output_path):
            print("skipping deletion - page does not exist: {}".format(rev['page']))
            continue
        print("Removing {}".format(rev['page']))
        index.remove(output_filename)
        os.remove(output_path)
    index.write()
    # https://www.pygit2.org/recipes/git-cherry-pick.html
    # https://stackoverflow.com/questions/29469649/create-a-commit-using-pygit2
    author_email = '{}@wikiotics.org'.format(rev['author'].replace('@', '_') if 'author' in rev else rev['author_ip'])
    author = pygit2.Signature(author_email, author_email, time=int(rev['timestamp'].timestamp()))
    committer = pygit2.Signature('Jim Garrison', 'garrison@wikiotics.org')
    tree = index.write_tree()
    log_message = rev.get('log_message', '(No log message)')
    log_message += '\n\nAutomated import from Ductus\nurn:{}'.format(rev['urn'])
    repo.create_commit(branch_ref, author, committer, log_message, tree, [repo.head.target])
